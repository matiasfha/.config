{
  "version": 3,
  "sources": ["../node_modules/untildify/index.js", "../src/manage-downloads.tsx", "../src/utils.ts"],
  "sourcesContent": ["'use strict';\nconst os = require('os');\n\nconst homeDirectory = os.homedir();\n\nmodule.exports = pathWithTilde => {\n\tif (typeof pathWithTilde !== 'string') {\n\t\tthrow new TypeError(`Expected a string, got ${typeof pathWithTilde}`);\n\t}\n\n\treturn homeDirectory ? pathWithTilde.replace(/^~(?=$|\\/|\\\\)/, homeDirectory) : pathWithTilde;\n};\n", "import { ActionPanel, Action, List } from \"@raycast/api\";\nimport { PathLike } from \"fs\";\nimport { useState } from \"react\";\nimport { downloadsFolder, getDownloads } from \"./utils\";\n\nexport default function Command() {\n  const [downloads, setDownloads] = useState(getDownloads());\n\n  function handleTrash(paths: PathLike | PathLike[]) {\n    setDownloads((downloads) =>\n      downloads.filter((download) => (Array.isArray(paths) ? !paths.includes(download.path) : paths !== download.path))\n    );\n  }\n\n  return (\n    <List>\n      {downloads.length === 0 && (\n        <List.EmptyView\n          icon={{ fileIcon: downloadsFolder }}\n          title=\"No downloads found\"\n          description=\"Well, first download some files \u00AF\\_(\u30C4)_/\u00AF\"\n        />\n      )}\n\n      {downloads.map((download) => (\n        <List.Item\n          key={download.path}\n          title={download.file}\n          icon={{ fileIcon: download.path }}\n          quickLook={{ path: download.path, name: download.file }}\n          accessories={[\n            {\n              date: download.lastModifiedAt,\n              tooltip: `Last modified: ${download.lastModifiedAt.toLocaleString()}`,\n            },\n          ]}\n          actions={\n            <ActionPanel>\n              <ActionPanel.Section>\n                <Action.Open title=\"Open File\" target={download.path} />\n                <Action.ShowInFinder path={download.path} />\n                <Action.CopyToClipboard\n                  title=\"Copy File\"\n                  content={{ file: download.path }}\n                  shortcut={{ modifiers: [\"cmd\", \"shift\"], key: \"c\" }}\n                />\n              </ActionPanel.Section>\n              <ActionPanel.Section>\n                <Action.OpenWith path={download.path} shortcut={{ modifiers: [\"cmd\"], key: \"o\" }} />\n                <Action.ToggleQuickLook shortcut={{ modifiers: [\"cmd\"], key: \"y\" }} />\n              </ActionPanel.Section>\n              <ActionPanel.Section>\n                <Action.Trash\n                  title=\"Delete Download\"\n                  paths={download.path}\n                  shortcut={{ modifiers: [\"ctrl\"], key: \"x\" }}\n                  onTrash={handleTrash}\n                />\n                <Action.Trash\n                  title=\"Delete All Downloads\"\n                  paths={downloads.map((d) => d.path)}\n                  shortcut={{ modifiers: [\"ctrl\", \"shift\"], key: \"x\" }}\n                  onTrash={handleTrash}\n                />\n              </ActionPanel.Section>\n            </ActionPanel>\n          }\n        />\n      ))}\n    </List>\n  );\n}\n", "import { getPreferenceValues } from \"@raycast/api\";\nimport { readdirSync, statSync } from \"fs\";\nimport { join } from \"path\";\nimport untildify from \"untildify\";\n\nconst preferences = getPreferenceValues();\nexport const downloadsFolder = untildify(preferences.downloadsFolder ?? \"~/Downloads\");\n\nexport function getDownloads() {\n  const files = readdirSync(downloadsFolder);\n  return files\n    .filter((file) => !file.startsWith(\".\"))\n    .map((file) => {\n      const path = join(downloadsFolder, file);\n      const lastModifiedAt = statSync(path).mtime;\n      return { file, path, lastModifiedAt };\n    })\n    .sort((a, b) => b.lastModifiedAt.getTime() - a.lastModifiedAt.getTime());\n}\n\nexport function getLatestDownload() {\n  const downloads = getDownloads();\n  if (downloads.length < 1) {\n    return undefined;\n  }\n\n  return downloads[0];\n}\n"],
  "mappings": "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",
  "names": ["require_untildify", "__commonJSMin", "exports", "module", "os", "homeDirectory", "pathWithTilde", "manage_downloads_exports", "__export", "Command", "__toCommonJS", "import_api", "import_react", "import_api", "import_fs", "import_path", "import_untildify", "preferences", "downloadsFolder", "untildify", "getDownloads", "file", "path", "lastModifiedAt", "a", "b", "import_jsx_runtime", "Command", "downloads", "setDownloads", "getDownloads", "handleTrash", "paths", "download", "downloadsFolder", "d"]
}
