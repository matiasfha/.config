{
  "version": 3,
  "sources": ["../src/pomodoro-control-timer.tsx", "../lib/intervals.tsx"],
  "sourcesContent": ["import { Detail, launchCommand, LaunchType, closeMainWindow, popToRoot, List, Icon } from \"@raycast/api\";\nimport { ActionPanel, Action } from \"@raycast/api\";\nimport { exec } from \"child_process\";\nimport {\n  continueInterval,\n  createInterval,\n  getCurrentInterval,\n  isPaused,\n  pauseInterval,\n  preferences,\n  resetInterval,\n} from \"../lib/intervals\";\n\nconst createAction = (action: () => void) => () => {\n  action();\n\n  try {\n    launchCommand({\n      name: \"pomodoro-menu-bar\",\n      type: LaunchType.UserInitiated,\n    });\n  } catch (error) {\n    console.error(error);\n  }\n\n  popToRoot();\n  closeMainWindow();\n};\n\nconst ActionsList = () => {\n  const currentInterval = getCurrentInterval();\n\n  return (\n    <List navigationTitle=\"Control Pomodoro Timers\">\n      {currentInterval ? (\n        <>\n          {isPaused(currentInterval) ? (\n            <List.Item\n              title=\"Continue\"\n              icon={Icon.Play}\n              actions={\n                <ActionPanel>\n                  <Action onAction={createAction(continueInterval)} title={\"Continue\"} />\n                </ActionPanel>\n              }\n            />\n          ) : (\n            <List.Item\n              title=\"Pause\"\n              icon={Icon.Pause}\n              actions={\n                <ActionPanel>\n                  <Action onAction={createAction(pauseInterval)} title={\"Pause\"} />\n                </ActionPanel>\n              }\n            />\n          )}\n          <List.Item\n            title=\"Reset\"\n            icon={Icon.Stop}\n            actions={\n              <ActionPanel>\n                <Action onAction={createAction(resetInterval)} title={\"Reset\"} />\n              </ActionPanel>\n            }\n          />\n        </>\n      ) : (\n        <>\n          <List.Item\n            title={`Focus`}\n            subtitle={`${preferences.focusIntervalDuration}:00`}\n            icon={`\uD83C\uDFAF`}\n            actions={\n              <ActionPanel>\n                <Action onAction={createAction(() => createInterval(\"focus\"))} title={\"Focus\"} />\n              </ActionPanel>\n            }\n          />\n          <List.Item\n            title={`Short Break`}\n            subtitle={`${preferences.shortBreakIntervalDuration}:00`}\n            icon={`\uD83E\uDDD8\u200D\u2642\uFE0F`}\n            actions={\n              <ActionPanel>\n                <Action onAction={createAction(() => createInterval(\"short-break\"))} title={\"Short Break\"} />\n              </ActionPanel>\n            }\n          />\n          <List.Item\n            title={`Long Break`}\n            subtitle={`${preferences.longBreakIntervalDuration}:00`}\n            icon={`\uD83D\uDEB6`}\n            actions={\n              <ActionPanel>\n                <Action onAction={createAction(() => createInterval(\"long-break\"))} title={\"Long Break\"} />\n              </ActionPanel>\n            }\n          />\n        </>\n      )}\n    </List>\n  );\n};\n\nconst EndOfInterval = () => {\n  if (preferences.sound) {\n    exec(`afplay /System/Library/Sounds/${preferences.sound}.aiff -v 10 && $$`);\n  }\n\n  return (\n    <Detail\n      navigationTitle={`Interval completed`}\n      markdown={`${preferences.completionImage}`}\n      actions={\n        <ActionPanel title=\"Start Next Interval\">\n          <Action\n            title=\"Focus\"\n            onAction={createAction(() => createInterval(\"focus\"))}\n            shortcut={{ modifiers: [\"cmd\"], key: \"f\" }}\n          />\n          <Action\n            title=\"Short Break\"\n            onAction={createAction(() => createInterval(\"short-break\"))}\n            shortcut={{ modifiers: [\"cmd\"], key: \"s\" }}\n          />\n          <Action\n            title=\"Long Break\"\n            onAction={createAction(() => createInterval(\"long-break\"))}\n            shortcut={{ modifiers: [\"cmd\"], key: \"l\" }}\n          />\n        </ActionPanel>\n      }\n    />\n  );\n};\n\nexport default function Command(props: { launchContext?: { currentInterval: string } }) {\n  return props.launchContext?.currentInterval ? <EndOfInterval /> : <ActionsList />;\n}\n", "import { Cache, getPreferenceValues } from \"@raycast/api\";\n\nexport type Preferences = {\n  focusIntervalDuration: string;\n  shortBreakIntervalDuration: string;\n  longBreakIntervalDuration: string;\n  completionImage: string;\n  sound: string;\n};\n\nexport type IntervalType = \"focus\" | \"short-break\" | \"long-break\";\n\ntype Part = {\n  startedAt: number;\n  pausedAt?: number;\n};\n\nexport type Interval = {\n  parts: Part[];\n  length: number;\n  type: IntervalType;\n};\n\nconst cache = new Cache();\n\nconst CACHE_KEY = \"pomodoro-interval/1.1\";\n\nconst currentTimestamp = () => Math.round(new Date().valueOf() / 1000);\n\nexport function duration({ parts }: Interval): number {\n  return parts.reduce((acc, part) => {\n    return (\n      (typeof part.pausedAt !== \"undefined\" ? part.pausedAt - part.startedAt : currentTimestamp() - part.startedAt) +\n      acc\n    );\n  }, 0);\n}\n\nexport function progress(interval: Interval): number {\n  return (duration(interval) / interval.length) * 100;\n}\n\nexport function isPaused({ parts }: Interval): boolean {\n  return !!parts[parts.length - 1].pausedAt;\n}\n\nexport function createInterval(type: IntervalType): Interval {\n  const interval = {\n    type,\n    length: intervalDurations[type],\n    parts: [\n      {\n        startedAt: currentTimestamp(),\n      },\n    ],\n  };\n  cache.set(CACHE_KEY, JSON.stringify(interval));\n  return interval;\n}\n\nexport function pauseInterval() {\n  let interval = getCurrentInterval();\n  if (interval) {\n    const parts = [...interval.parts];\n    parts[parts.length - 1].pausedAt = currentTimestamp();\n    interval = {\n      ...interval,\n      parts,\n    };\n    cache.set(CACHE_KEY, JSON.stringify(interval));\n  }\n  return interval;\n}\n\nexport function continueInterval() {\n  let interval = getCurrentInterval();\n  if (interval) {\n    const parts = [...interval.parts, { startedAt: currentTimestamp() }];\n    interval = {\n      ...interval,\n      parts,\n    };\n    cache.set(CACHE_KEY, JSON.stringify(interval));\n  }\n  return interval;\n}\n\nexport function resetInterval() {\n  cache.remove(CACHE_KEY);\n}\n\nexport function getCurrentInterval(): Interval | undefined {\n  const result = cache.get(CACHE_KEY);\n  if (result) {\n    return JSON.parse(result);\n  }\n}\n\nexport const preferences = getPreferenceValues<Preferences>();\nexport const intervalDurations: Record<IntervalType, number> = {\n  focus: parseInt(preferences.focusIntervalDuration) * 60,\n  \"short-break\": parseInt(preferences.shortBreakIntervalDuration) * 60,\n  \"long-break\": parseInt(preferences.longBreakIntervalDuration) * 60,\n};\n"],
  "mappings": "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",
  "names": ["pomodoro_control_timer_exports", "__export", "Command", "__toCommonJS", "import_api", "import_child_process", "import_api", "cache", "CACHE_KEY", "currentTimestamp", "isPaused", "parts", "createInterval", "type", "interval", "intervalDurations", "currentTimestamp", "cache", "CACHE_KEY", "pauseInterval", "getCurrentInterval", "continueInterval", "resetInterval", "result", "preferences", "import_jsx_runtime", "createAction", "action", "error", "ActionsList", "currentInterval", "getCurrentInterval", "isPaused", "continueInterval", "pauseInterval", "resetInterval", "preferences", "createInterval", "EndOfInterval", "Command", "props"]
}
