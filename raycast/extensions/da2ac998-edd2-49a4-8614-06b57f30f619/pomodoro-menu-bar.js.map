{
  "version": 3,
  "sources": ["../src/pomodoro-menu-bar.tsx", "../lib/intervals.tsx", "../lib/secondsToTime.tsx"],
  "sourcesContent": ["import { MenuBarExtra, Icon, launchCommand, LaunchType } from \"@raycast/api\";\nimport { useState } from \"react\";\nimport {\n  createInterval,\n  getCurrentInterval,\n  resetInterval,\n  pauseInterval,\n  continueInterval,\n  IntervalType,\n  Interval,\n  isPaused,\n  duration,\n  preferences,\n  progress,\n} from \"../lib/intervals\";\nimport { secondsToTime } from \"../lib/secondsToTime\";\n\nexport default function TogglePomodoroTimer() {\n  const [currentInterval, setCurrentInterval] = useState<Interval | undefined>(getCurrentInterval());\n\n  if (currentInterval && progress(currentInterval) >= 100) {\n    try {\n      launchCommand({\n        name: \"pomodoro-control-timer\",\n        type: LaunchType.UserInitiated,\n        context: { currentInterval },\n      });\n    } catch (error) {\n      console.error(error);\n    }\n\n    resetInterval();\n  }\n\n  function onStart(type: IntervalType) {\n    setCurrentInterval(createInterval(type));\n  }\n\n  function onPause() {\n    setCurrentInterval(pauseInterval());\n  }\n\n  function onContinue() {\n    setCurrentInterval(continueInterval());\n  }\n\n  function onReset() {\n    resetInterval();\n    setCurrentInterval(undefined);\n  }\n\n  let icon;\n  icon = { source: { light: \"tomato-light.png\", dark: \"tomato-dark.png\" } };\n  if (currentInterval) {\n    const progressInQuarters = Math.floor(progress(currentInterval) / 25) * 25;\n    icon = Icon[(progressInQuarters > 0 ? `CircleProgress${progressInQuarters}` : \"Circle\") as keyof typeof Icon];\n  }\n\n  const title = currentInterval ? secondsToTime(currentInterval.length - duration(currentInterval)) : \"--:--\";\n\n  return (\n    <MenuBarExtra icon={icon} title={title} tooltip={\"Pomodoro\"}>\n      {currentInterval ? (\n        <>\n          {isPaused(currentInterval) ? (\n            <MenuBarExtra.Item\n              title=\"Continue\"\n              icon={Icon.Play}\n              onAction={onContinue}\n              shortcut={{ modifiers: [\"cmd\"], key: \"c\" }}\n            />\n          ) : (\n            <MenuBarExtra.Item\n              title=\"Pause\"\n              icon={Icon.Pause}\n              onAction={onPause}\n              shortcut={{ modifiers: [\"cmd\"], key: \"p\" }}\n            />\n          )}\n          <MenuBarExtra.Item\n            title=\"Reset\"\n            icon={Icon.Stop}\n            onAction={onReset}\n            shortcut={{ modifiers: [\"cmd\"], key: \"r\" }}\n          />\n        </>\n      ) : (\n        <>\n          <MenuBarExtra.Item\n            title={`Focus`}\n            subtitle={`${preferences.focusIntervalDuration}:00`}\n            icon={`\uD83C\uDFAF`}\n            onAction={() => onStart(\"focus\")}\n            shortcut={{ modifiers: [\"cmd\"], key: \"f\" }}\n          />\n          <MenuBarExtra.Item\n            title={`Short Break`}\n            subtitle={`${preferences.shortBreakIntervalDuration}:00`}\n            icon={`\uD83E\uDDD8\u200D\u2642\uFE0F`}\n            onAction={() => onStart(\"short-break\")}\n            shortcut={{ modifiers: [\"cmd\"], key: \"s\" }}\n          />\n          <MenuBarExtra.Item\n            title={`Long Break`}\n            subtitle={`${preferences.longBreakIntervalDuration}:00`}\n            icon={`\uD83D\uDEB6`}\n            onAction={() => onStart(\"long-break\")}\n            shortcut={{ modifiers: [\"cmd\"], key: \"l\" }}\n          />\n        </>\n      )}\n    </MenuBarExtra>\n  );\n}\n", "import { Cache, getPreferenceValues } from \"@raycast/api\";\n\nexport type Preferences = {\n  focusIntervalDuration: string;\n  shortBreakIntervalDuration: string;\n  longBreakIntervalDuration: string;\n  completionImage: string;\n  sound: string;\n};\n\nexport type IntervalType = \"focus\" | \"short-break\" | \"long-break\";\n\ntype Part = {\n  startedAt: number;\n  pausedAt?: number;\n};\n\nexport type Interval = {\n  parts: Part[];\n  length: number;\n  type: IntervalType;\n};\n\nconst cache = new Cache();\n\nconst CACHE_KEY = \"pomodoro-interval/1.1\";\n\nconst currentTimestamp = () => Math.round(new Date().valueOf() / 1000);\n\nexport function duration({ parts }: Interval): number {\n  return parts.reduce((acc, part) => {\n    return (\n      (typeof part.pausedAt !== \"undefined\" ? part.pausedAt - part.startedAt : currentTimestamp() - part.startedAt) +\n      acc\n    );\n  }, 0);\n}\n\nexport function progress(interval: Interval): number {\n  return (duration(interval) / interval.length) * 100;\n}\n\nexport function isPaused({ parts }: Interval): boolean {\n  return !!parts[parts.length - 1].pausedAt;\n}\n\nexport function createInterval(type: IntervalType): Interval {\n  const interval = {\n    type,\n    length: intervalDurations[type],\n    parts: [\n      {\n        startedAt: currentTimestamp(),\n      },\n    ],\n  };\n  cache.set(CACHE_KEY, JSON.stringify(interval));\n  return interval;\n}\n\nexport function pauseInterval() {\n  let interval = getCurrentInterval();\n  if (interval) {\n    const parts = [...interval.parts];\n    parts[parts.length - 1].pausedAt = currentTimestamp();\n    interval = {\n      ...interval,\n      parts,\n    };\n    cache.set(CACHE_KEY, JSON.stringify(interval));\n  }\n  return interval;\n}\n\nexport function continueInterval() {\n  let interval = getCurrentInterval();\n  if (interval) {\n    const parts = [...interval.parts, { startedAt: currentTimestamp() }];\n    interval = {\n      ...interval,\n      parts,\n    };\n    cache.set(CACHE_KEY, JSON.stringify(interval));\n  }\n  return interval;\n}\n\nexport function resetInterval() {\n  cache.remove(CACHE_KEY);\n}\n\nexport function getCurrentInterval(): Interval | undefined {\n  const result = cache.get(CACHE_KEY);\n  if (result) {\n    return JSON.parse(result);\n  }\n}\n\nexport const preferences = getPreferenceValues<Preferences>();\nexport const intervalDurations: Record<IntervalType, number> = {\n  focus: parseInt(preferences.focusIntervalDuration) * 60,\n  \"short-break\": parseInt(preferences.shortBreakIntervalDuration) * 60,\n  \"long-break\": parseInt(preferences.longBreakIntervalDuration) * 60,\n};\n", "export function secondsToTime(secondsToDisplay: number): string {\n  if (secondsToDisplay <= 0) {\n    return \"00:00\";\n  }\n  const minutes = Math.floor(secondsToDisplay / 60);\n  const seconds = secondsToDisplay % 60;\n  return `${minutes < 10 ? `0${minutes}` : minutes}:${seconds < 10 ? `0${seconds}` : seconds}`;\n}\n"],
  "mappings": "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",
  "names": ["pomodoro_menu_bar_exports", "__export", "TogglePomodoroTimer", "__toCommonJS", "import_api", "import_react", "import_api", "cache", "CACHE_KEY", "currentTimestamp", "duration", "parts", "acc", "part", "progress", "interval", "isPaused", "createInterval", "type", "intervalDurations", "pauseInterval", "getCurrentInterval", "continueInterval", "resetInterval", "result", "preferences", "secondsToTime", "secondsToDisplay", "minutes", "seconds", "import_jsx_runtime", "TogglePomodoroTimer", "currentInterval", "setCurrentInterval", "getCurrentInterval", "progress", "error", "resetInterval", "onStart", "type", "createInterval", "onPause", "pauseInterval", "onContinue", "continueInterval", "onReset", "icon", "progressInQuarters", "title", "secondsToTime", "duration", "isPaused", "preferences"]
}
